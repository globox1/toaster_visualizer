#include "ros/ros.h"
#include "std_msgs/String.h"
#include <iostream> 
#include <sstream>
#include <algorithm>
#include <string>
#include <visualization_msgs/MarkerArray.h>
#include <visualization_msgs/Marker.h>
#include <sstream>
#include <iostream>
#include <vector> 
#include "toaster_msgs/Entity.h"
#include "toaster_msgs/Object.h"
#include "toaster_msgs/Area.h"
#include "toaster_msgs/AreaList.h"
#include "geometry_msgs/Point.h"
#include "toaster_msgs/ObjectList.h"
#include "toaster_msgs/Human.h"
#include "toaster_msgs/HumanList.h"
#include "toaster_msgs/Joint.h"




class Control
{
	visualization_msgs::MarkerArray area_list;
	visualization_msgs::MarkerArray obj_list;
	visualization_msgs::MarkerArray human_list;
	
	
	std::vector<std::string> name_list;
	int id_cpt;	
	
	//subscribers
	ros::Subscriber sub_area;
	ros::Subscriber sub_obj;
	
	ros::Subscriber sub_objList;
	ros::Subscriber sub_areaList;
	ros::Subscriber sub_humanList;
	
	
	//publishers
	ros::Publisher pub_obj;
	ros::Publisher pub_area;
	ros::Publisher pub_human;
	

		
		
	public:
	
	
	Control()
	{		
		name_list = std::vector<std::string>();
		id_cpt = 0;

		ros::NodeHandle reception_node;
		ros::NodeHandle emission_node;
		
		area_list =  visualization_msgs::MarkerArray();
		obj_list = visualization_msgs::MarkerArray();
		human_list = visualization_msgs::MarkerArray();
		
		
		sub_area = reception_node.subscribe("toast_msg_rviz_area", 1000, &Control::chatterCallbackArea, this);
		sub_obj = reception_node.subscribe("toast_msg_rviz_obj", 1000, &Control::chatterCallbackObj, this);
		
		sub_objList = reception_node.subscribe("toast_msg_rviz_obj_list", 1000, &Control::chatterCallbackObjList, this);
		sub_areaList = reception_node.subscribe("/area_manager/areaList", 1000, &Control::chatterCallbackAreaList, this);
		sub_humanList = reception_node.subscribe("toast_msg_rviz_human_list", 1000, &Control::chatterCallbackHumanList, this);
		
		
		pub_obj = emission_node.advertise<visualization_msgs::MarkerArray>("visualisation_obj", 1000);
		pub_area = emission_node.advertise<visualization_msgs::MarkerArray>("visualisation_area", 1000);
		pub_human = emission_node.advertise<visualization_msgs::MarkerArray>("visualisation_human", 1000);	
	}
	




// **************************************** fonctions de definition des markers ********************************************************

	visualization_msgs::Marker defineArea(geometry_msgs::Point p, double rayon, std::string name)  //creation d'un marker area
	{
		//declarration du marker
		visualization_msgs::Marker marker;

		//frame id
		marker.header.frame_id = "/my";
		
		//namespace
		std::ostringstream nameSpace;
		nameSpace << name;
		marker.ns = nameSpace.str();
		marker.id = id_generator(name);
		
		
		
		//action
		marker.action = visualization_msgs::Marker::ADD;

		//position
		marker.pose.position.x = p.x;
		marker.pose.position.y = p.y;
		marker.pose.position.z = p.z;
		
		//orientation
		marker.pose.orientation.x = 0.0;
		marker.pose.orientation.y = 0.0;
		marker.pose.orientation.z = 0.0;
		marker.pose.orientation.w = 1.0;

		//couleur
		marker.color.r= 0.0f;
		marker.color.g= 1.0f;
		marker.color.b= 0.0f;
		marker.color.a= 1.0;

		//dimemsiom
		marker.scale.x = rayon;
		marker.scale.y = rayon;
		marker.scale.z = 0.1;
		
		//type de marker
		marker.type = 2;

		marker.lifetime = ros::Duration();
		
		return marker;
	}


	visualization_msgs::Marker defineObj(int  x, int y, int z, double scale, std::string name) //creation d'un marker obj
	{
		//declarration du marker
		visualization_msgs::Marker marker;

		//frame id
		marker.header.frame_id = "/my";
		
		//namespace
		std::ostringstream nameSpace;
		nameSpace << name;
		marker.ns = nameSpace.str();
		marker.id = id_generator(name);
		
		
		//action
		marker.action = visualization_msgs::Marker::ADD;

		//position
		marker.pose.position.x = x;
		marker.pose.position.y = y;
		marker.pose.position.z = z;
		
		//orientation
		marker.pose.orientation.x = 0.0;
		marker.pose.orientation.y = 0.0;
		marker.pose.orientation.z = 0.0;
		marker.pose.orientation.w = 1.0;

		//couleur
		marker.color.r= 0.0f;
		marker.color.g= 1.0f;
		marker.color.b= 0.0f;
		marker.color.a= 1.0;

		//dimemsiom
		marker.scale.x = 1*scale;
		marker.scale.y = 1*scale;
		marker.scale.z = 1*scale;
		
		//type de marker
		marker.type = 1;

		marker.lifetime = ros::Duration();
		
		return marker;
	}


	visualization_msgs::Marker defineName(visualization_msgs::Marker marker) //nameMarker correspondant au marker en entree
	{
		//declaration
		visualization_msgs::Marker nameMarker = marker;
		
		//position
		nameMarker.pose.position.z = nameMarker.pose.position.z + marker.scale.x*1.25;
		
		
		//color
		nameMarker.color.r= marker.color.r*0.7f;
		nameMarker.color.g= marker.color.g*0.7f;
		nameMarker.color.b= marker.color.b*0.7f;
		nameMarker.color.a= 1.0;
		
		
		//id  (oppose a celui du marker)
		nameMarker.id = - nameMarker.id;
		
		//type
		nameMarker.type = 9;
		
		//text field
		nameMarker.text = marker.ns;
		
		//scale
		marker.scale.z = 1.0;  
	   
	   
		return nameMarker;
		
	}


	visualization_msgs::Marker defineHuman(int  x, int y, int z, double scale, std::string name) //creation d'un marker human
	{
		//declarration du marker
		visualization_msgs::Marker marker;

		//frame id
		marker.header.frame_id = "/my";
		
		//namespace
		std::ostringstream nameSpace;
		nameSpace << name;
		marker.ns = nameSpace.str();
		marker.id = id_generator(name);
		
		
		//action
		marker.action = visualization_msgs::Marker::ADD;

		//position
		marker.pose.position.x = x;
		marker.pose.position.y = y;
		marker.pose.position.z = z;
		
		//orientation
		marker.pose.orientation.x = 0.0;
		marker.pose.orientation.y = 0.0;
		marker.pose.orientation.z = 0.0;
		marker.pose.orientation.w = 1.0;

		//couleur
		marker.color.r= 0.0f;
		marker.color.g= 1.0f;
		marker.color.b= 0.0f;
		marker.color.a= 0.0;

		//dimemsiom
		marker.scale.x = 1*scale;
		marker.scale.y = 1*scale;
		marker.scale.z = 1*scale;
		
		
		//type de marker
		marker.type = visualization_msgs::Marker::MESH_RESOURCE;
		marker.mesh_resource = "package://plug_v3/mesh/3dm-Vincent.3ds";
		
		//marker.mesh_resource = "package://pr2_description/meshes/base_v0/base.dae";

		marker.lifetime = ros::Duration();
		
		return marker;
		
		
	}



	visualization_msgs::MarkerArray defineHumanBody(std::vector<toaster_msgs::Joint> membres, double scale, std::string name) 
	{
		//declarration du marker
		visualization_msgs::MarkerArray markers;
		
		visualization_msgs::Marker markerTempo;

		for(int i = 0; i<membres.size(); i++)
		{
			//frame id
			markerTempo.header.frame_id = "/my";
			
			//namespace
			std::ostringstream nameSpace;
			nameSpace << name;
			markerTempo.ns = nameSpace.str();
			markerTempo.id = id_generator(membres[i].meEntity.name);
			
			//action
			markerTempo.action = visualization_msgs::Marker::ADD;

			//position
			markerTempo.pose.position.x = membres[i].meEntity.positionX;
			markerTempo.pose.position.y = membres[i].meEntity.positionY;
			markerTempo.pose.position.z = membres[i].meEntity.positionZ;
			
			
			
			//orientation
			markerTempo.pose.orientation.x = membres[i].meEntity.orientationRoll; 
			markerTempo.pose.orientation.y = membres[i].meEntity.orientationPitch;
			markerTempo.pose.orientation.z = membres[i].meEntity.orientationYaw;
			markerTempo.pose.orientation.w = 1.0;

			//couleur
			markerTempo.color.r= 1.0f;
			markerTempo.color.g= 1.0f;
			markerTempo.color.b= 0.0f;
			markerTempo.color.a= 1.0;

			//dimemsiom
			markerTempo.scale.x = 1*scale;
			markerTempo.scale.y = 1*scale;
			markerTempo.scale.z = 1*scale;
			
			//type de marker
			markerTempo.type = 4;

			markerTempo.lifetime = ros::Duration();
			markers.markers.push_back(markerTempo);
		}
			
		return markers;
	}






// ******************************************************** generateur d'identifiant pour les markers ********************************************************

	int id_generator(std::string name)
	{
		if(std::find(name_list.begin(), name_list.end(), name) != name_list.end())
		{
			return find(name_list.begin(), name_list.end(), name) - name_list.begin();
		}
		else
		{
			name_list.push_back(name);
			return id_cpt++;
		}
	}







// ******************************************************** fonctions de reglages ********************************************************

	visualization_msgs::Marker setOrientation(visualization_msgs::Marker marker, float orientationX, float orientationY, float orientationZ)
	{	
		marker.pose.orientation.x = orientationX/90.0;
		marker.pose.orientation.y = orientationY/90.0;
		marker.pose.orientation.z = orientationZ/90.0;
		
		marker.pose.orientation.w = 1.0;
	
		return marker;
	}

	
	visualization_msgs::Marker setColor(visualization_msgs::Marker marker, double r, double g, double b)
	{
		marker.color.r= r;
		marker.color.g= g;
		marker.color.b= b;
		
		return marker;
	}


	visualization_msgs::Marker setPosition(visualization_msgs::Marker marker, int x, int y, int z)
	{	
		marker.pose.position.x = x;
		marker.pose.position.y = y;
		marker.pose.position.z = z;
		
		return marker;
	}
	
	
		visualization_msgs::Marker setSize(visualization_msgs::Marker marker, int x, int y, int z)
	{	
		marker.scale.x = 1*x;
		marker.scale.y = 1*y;
		marker.scale.z = 1*z;
		
		return marker;
	}







//******************************************************** emission/reception ********************************************************

	//reception toaster msg  
	void chatterCallbackObj(const toaster_msgs::Object::ConstPtr& msg)
	{	  
			visualization_msgs::Marker m = defineObj(msg->meEntity.positionX, msg->meEntity.positionY, msg->meEntity.positionZ, 
			10, msg->meEntity.name);
				
			m = setOrientation(m, msg->meEntity.orientationRoll, msg->meEntity.orientationPitch, msg->meEntity.orientationYaw);
			m = setColor(m, 0.0, 1.0, 1.0);
			visualization_msgs::Marker mn = defineName(m);
			obj_list.markers.push_back(mn);
			obj_list.markers.push_back(m);
			
			ROS_INFO("obj %d", m.id);
		
	}
	
	
	void chatterCallbackObjList(const toaster_msgs::ObjectList::ConstPtr& msg)
	{	  
		
		for(int i = 0; i<msg->objectList.size(); i++)
		{
			visualization_msgs::Marker m = defineObj(msg->objectList[i].meEntity.positionX, msg->objectList[i].meEntity.positionY, msg->objectList[i].meEntity.positionZ, 
			10, msg->objectList[i].meEntity.name);
				
			m = setOrientation(m,  msg->objectList[i].meEntity.orientationPitch, msg->objectList[i].meEntity.orientationRoll, msg->objectList[i].meEntity.orientationYaw);
			m = setColor(m, 0.0, 0.6, 1.0);
			
			visualization_msgs::Marker mn = defineName(m);
			
			obj_list.markers.push_back(mn);
			obj_list.markers.push_back(m);
			
			ROS_INFO("obj %d", m.id);
		}
		
	}
	
	
	void chatterCallbackArea(const toaster_msgs::Area::ConstPtr& msg)
	{
		
			visualization_msgs::Marker m = defineArea(msg->center, 
			msg->ray, msg->name);
				
			m = setColor(m, 0.0, 1.0, 0.0);
			
			area_list.markers.push_back(m);
			
			
			ROS_INFO("area %d", m.id);
		
	}
	
	
	
	void chatterCallbackAreaList(const toaster_msgs::AreaList::ConstPtr& msg)
	{	  
		
		for(int i = 0; i<msg->areaList.size(); i++)
		{

                        if(msg->areaList[i].isCircle == true){
				visualization_msgs::Marker m = defineArea(msg->areaList[i].center, 
				msg->areaList[i].ray, msg->areaList[i].name);
				
				m = setColor(m, 0.0, 1.0, 0.0);
			
				area_list.markers.push_back(m);
			ROS_INFO("area %d", m.id);
			}
			
		}
		
	}
	
	
	
	void chatterCallbackHumanList(const toaster_msgs::HumanList::ConstPtr& msg)
	{
		for(int i = 0; i<msg->humanList.size(); i++)
		{
			visualization_msgs::Marker m = defineHuman(msg->humanList[i].meAgent.meEntity.positionX, msg->humanList[i].meAgent.meEntity.positionY, msg->humanList[i].meAgent.meEntity.positionZ, 
			0.4, msg->humanList[i].meAgent.meEntity.name);
			
			m = setOrientation(m,  msg->humanList[i].meAgent.meEntity.orientationPitch, msg->humanList[i].meAgent.meEntity.orientationRoll, msg->humanList[i].meAgent.meEntity.orientationYaw);
			m = setColor(m, 1.0, 1.0, 1.0);
			
			visualization_msgs::Marker mn = defineName(m);
			mn = setPosition(mn, mn.pose.position.x, mn.pose.position.y, 40);
			mn = setSize(mn, 0,0,10);
			
			//visualization_msgs::MarkerArray ma = defineHumanBody(msg->humanList[i].meAgent.skeletonJoint, 10, msg->humanList[i].meAgent.meEntity.name);
				
				
			human_list.markers.push_back(m);
			human_list.markers.push_back(mn);
			
			
			ROS_INFO("human %d", m.id);
		}
	}
	
			


	//emission
	void send()
	{
		pub_area.publish(area_list);
		pub_obj.publish(obj_list);
		pub_human.publish(human_list);
		
		ros::spinOnce();
	}
};

	
	
	
	
	
	
int main(int argc, char **argv)
{
	ros::init(argc, argv, "Control");
	
	Control c = Control();
	
	
	ros::Rate loop_rate(2);	
	
	while(ros::ok())
	{
		c.send();
		loop_rate.sleep();
	}
	
	return 0;
}
		

